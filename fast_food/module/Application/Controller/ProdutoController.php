<?php

namespace Application\Controller;

use Application\Helper\Message;
use Application\Helper\RegexValidatorException;
use Application\Model\ProdutoModel;
use Application\View\ApplicationView;
use Szy\Http\Request;
use Szy\Mvc\View\View;
use Szy\Util\DateTime;

class ProdutoController extends AdminController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (strpos($this->request->getRequestUri(), '/itens') > -1) {
            $this->url = '/estoque/itens';
            $this->tipo = '1';
        } else {
            $this->url = '/estoque/produtos';
            $this->tipo = '2';
        }
    }

    private function listagem(View $view, $pagina = 1)
	{
		$view->setTitle('Produtos');
        $view->url = $this->url;

		$model = new ProdutoModel();
		$view->setAttribute('produtos', $model->listar($this->tipo, $pagina));
		$view->flush();
	}

	public function indexAction($pagina = 1)
	{
		$view = new ApplicationView($this, 'produto/index');
		$this->listagem($view);
	}

    public function cadastrarAction()
    {
        $view = new ApplicationView($this, 'produto/formulario');
        $view->setTitle('Cadastrar produto');
        $view->url = $this->url;

        $model = new ProdutoModel();
        if ($this->isMethod(Request::METHOD_POST)) {

            $nome = $this->getNome();
            $valor = $this->getValor();
            $categoria = $this->getCategoria();

            try {
                $nome->validate(true);
                $valor->validate(true);
                $categoria->validate(true);

                $model->insert('produto', array('nome' => $nome->getValue(), 'valor' => $valor->getValue(), 'categoria' => $categoria->getValue(), 'tipo' => $this->tipo, 'ativo' => 1));
                $codigo = $model->lastID('codigo');

                $file = $_FILES['imagens'];
                if ($file['name'][0] != '') {
                    $data = new DateTime();
                    for ($n = 0; $n < count($_FILES['imagens']['name']); $n++) {

                        $imagem = new \StdClass();
                        $imagem->titulo = '';
                        $imagem->caminho = '/upload/img/' . $data->format('Y_m_d-h_i_s-') . $n . strrchr($file['name'][$n], '.');

                        move_uploaded_file($file['tmp_name'][$n], $imagem->caminho);
                        $model->insert('midia', array('titulo' => $imagem->titulo, 'caminho' => $imagem->caminho, 'produto' => $codigo));
                    }
                }

                $view->setMessage(new Message('Produto alterado com sucesso', Message::TYPE_SUCCESS));
                $this->response->sendRedirect($this->url . '/alterar/' . $codigo . '?sucesso=s');
            } catch (RegexValidatorException $ex) {
                $view->setMessage(new Message($ex->getMessage(), Message::TYPE_DANGER));
            }
        }
        $view->data['categorias'] = $model->select('categoria');
        $view->flush();
    }

	public function alterarAction($codigo)
	{
		$view = new ApplicationView($this, 'produto/formulario');
		$view->setTitle('Alterar produto');
        $view->url = $this->url;

		$model = new ProdutoModel();
		if ($this->isMethod(Request::METHOD_POST)) {

			$nome = $this->getNome();
			$valor = $this->getValor();
			$categoria = $this->getCategoria();
			try {
				$nome->validate(true);
				$valor->validate(true);
                $categoria->validate(true);

				$model->update('produto', array('nome' => $nome->getValue(), 'valor' => $valor->getValue(), 'categoria' => $categoria->getValue()), 'codigo = ?', array($codigo));
				$view->setMessage(new Message('Produto alterado com sucesso', Message::TYPE_SUCCESS));
			} catch (RegexValidatorException $ex) {
				$view->setMessage(new Message($ex->getMessage(), Message::TYPE_DANGER));
			}
		} else {
			$produto = (array) $model->row('produto', null, 'codigo = ?', array($codigo));
			$view->data = $produto;

			if ($this->getParam('sucesso') == 's')
				$view->setMessage(new Message('Produto cadastrado com sucesso', Message::TYPE_SUCCESS));
		}

        $view->data['categorias'] = $model->select('categoria');
		$view->flush();
	}

    public function excluirAction($codigo)
    {
        $view = new ApplicationView($this, 'produto/index');
        $view->url = $this->url;

        $model = new ProdutoModel();
        try {
            $model->delete('produto', 'tipo = ? AND codigo = ?', array($this->tipo, $codigo));
            $view->setMessage(new Message('Produto excluÃ­da', Message::TYPE_SUCCESS));
        } catch (\PDOException $ex) {
            $view->setMessage(new Message($ex->getMessage(), Message::TYPE_DANGER));
        }
        $this->listagem($view);
    }
}